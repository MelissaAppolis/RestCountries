{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch'; // install library to fetch data\n// Inline styling\n\nvar container = {\n  margin: 'auto',\n  width: '35%',\n  textAlign: 'center',\n  marginTop: '20px',\n  backgroundColor: 'white',\n  paddingBottom: '10px',\n  boxShadow: '7px 10px 17px rgb(72, 77, 77)',\n  borderRadius: '8px'\n};\nvar imageStyle = {\n  width: '100%',\n  borderTopLeftRadius: '8px',\n  borderTopRightRadius: '8px'\n};\nvar countryName = {\n  fontSize: '30px',\n  textTransform: 'uppercase',\n  color: 'rgb(118, 165, 165)',\n  letterSpacing: '2px',\n  marginTop: '0px',\n  marginBottom: '0px',\n  padding: '15px'\n};\nvar container2 = {\n  textAlign: 'left',\n  margin: 'auto',\n  width: '90%'\n}; // using array.map to create an array to display information that was fetch from the API\n// jsx styling is also used to style the div container\n\nvar Post = function Post(props) {\n  return __jsx(Layout, null, props.countries.map(function (country) {\n    return __jsx(\"div\", {\n      key: country.name,\n      style: container,\n      className: \"jsx-1675858510\"\n    }, __jsx(\"img\", {\n      style: imageStyle,\n      src: country.flag,\n      className: \"jsx-1675858510\"\n    }), __jsx(\"h1\", {\n      style: countryName,\n      className: \"jsx-1675858510\"\n    }, country.name), __jsx(\"div\", {\n      style: container2,\n      className: \"jsx-1675858510\"\n    }, __jsx(\"h4\", {\n      className: \"jsx-1675858510\"\n    }, __jsx(\"strong\", {\n      className: \"jsx-1675858510\"\n    }, \"Region: \"), \" \", country.region), __jsx(\"h4\", {\n      className: \"jsx-1675858510\"\n    }, __jsx(\"strong\", {\n      className: \"jsx-1675858510\"\n    }, \"Sub-region: \"), \" \", country.subregion), __jsx(\"h4\", {\n      className: \"jsx-1675858510\"\n    }, __jsx(\"strong\", {\n      className: \"jsx-1675858510\"\n    }, \"Population: \"), \" \", country.population), __jsx(\"h4\", {\n      className: \"jsx-1675858510\"\n    }, __jsx(\"strong\", {\n      className: \"jsx-1675858510\"\n    }, \"Language: \"), \" \", country.languages[0].name), __jsx(\"h4\", {\n      className: \"jsx-1675858510\"\n    }, __jsx(\"strong\", {\n      className: \"jsx-1675858510\"\n    }, \"Currency: \"), \" \", country.currencies[0].name, \" (\", country.currencies[0].symbol, \")\")));\n  }), __jsx(_JSXStyle, {\n    id: \"1675858510\"\n  }, \"h4.jsx-1675858510{color:rgb(95,131,131);text-transform:uppercase;font-size:18px;font-weight:500;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tZWxpc3NhL0Rlc2t0b3AvY291bnRyaWVzQVBJL3BhZ2VzL3Bvc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0RvQixBQUd5QyxzQkFDQyx5QkFDVixlQUNDLGdCQUNwQiIsImZpbGUiOiIvVXNlcnMvbWVsaXNzYS9EZXNrdG9wL2NvdW50cmllc0FQSS9wYWdlcy9wb3N0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExheW91dCBmcm9tICcuLi9jb21wb25lbnRzL0xheW91dCdcbmltcG9ydCBmZXRjaCBmcm9tICdpc29tb3JwaGljLXVuZmV0Y2gnLy8gaW5zdGFsbCBsaWJyYXJ5IHRvIGZldGNoIGRhdGFcblxuLy8gSW5saW5lIHN0eWxpbmdcbmNvbnN0IGNvbnRhaW5lciA9IHtcbiAgICBtYXJnaW46ICdhdXRvJyxcbiAgICB3aWR0aDogJzM1JScsXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICBtYXJnaW5Ub3A6ICcyMHB4JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgcGFkZGluZ0JvdHRvbTogJzEwcHgnLFxuICAgIGJveFNoYWRvdzogJzdweCAxMHB4IDE3cHggcmdiKDcyLCA3NywgNzcpJyxcbiAgICBib3JkZXJSYWRpdXM6ICc4cHgnXG59XG5cbmNvbnN0IGltYWdlU3R5bGUgPSB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiAnOHB4JyxcbiAgICBib3JkZXJUb3BSaWdodFJhZGl1czogJzhweCdcbn1cblxuY29uc3QgY291bnRyeU5hbWUgPSB7XG4gICAgZm9udFNpemU6ICczMHB4JyxcbiAgICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgICBjb2xvcjogJ3JnYigxMTgsIDE2NSwgMTY1KScsXG4gICAgbGV0dGVyU3BhY2luZzogJzJweCcsXG4gICAgbWFyZ2luVG9wOiAnMHB4JyxcbiAgICBtYXJnaW5Cb3R0b206ICcwcHgnLFxuICAgIHBhZGRpbmc6ICcxNXB4J1xufVxuXG5jb25zdCBjb250YWluZXIyID0ge1xuICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgIG1hcmdpbjogJ2F1dG8nLFxuICAgIHdpZHRoOiAnOTAlJyxcbn1cblxuLy8gdXNpbmcgYXJyYXkubWFwIHRvIGNyZWF0ZSBhbiBhcnJheSB0byBkaXNwbGF5IGluZm9ybWF0aW9uIHRoYXQgd2FzIGZldGNoIGZyb20gdGhlIEFQSVxuLy8ganN4IHN0eWxpbmcgaXMgYWxzbyB1c2VkIHRvIHN0eWxlIHRoZSBkaXYgY29udGFpbmVyXG5jb25zdCBQb3N0ID0gKHByb3BzKSA9PiAoXG4gICAgPExheW91dD5cbiAgICAgICAge3Byb3BzLmNvdW50cmllcy5tYXAoKGNvdW50cnkpID0+IChcbiAgICAgICAgICAgIDxkaXYga2V5PXtjb3VudHJ5Lm5hbWV9IHN0eWxlPXtjb250YWluZXJ9PlxuICAgICAgICAgICAgICAgIDxpbWcgc3R5bGU9e2ltYWdlU3R5bGV9IHNyYz17Y291bnRyeS5mbGFnfS8+XG4gICAgICAgICAgICAgICAgPGgxIHN0eWxlPXtjb3VudHJ5TmFtZX0+e2NvdW50cnkubmFtZX08L2gxPlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e2NvbnRhaW5lcjJ9PlxuICAgICAgICAgICAgICAgICAgICA8aDQ+PHN0cm9uZz5SZWdpb246IDwvc3Ryb25nPiB7Y291bnRyeS5yZWdpb259PC9oND5cbiAgICAgICAgICAgICAgICAgICAgPGg0PjxzdHJvbmc+U3ViLXJlZ2lvbjogPC9zdHJvbmc+IHtjb3VudHJ5LnN1YnJlZ2lvbn08L2g0PlxuICAgICAgICAgICAgICAgICAgICA8aDQ+PHN0cm9uZz5Qb3B1bGF0aW9uOiA8L3N0cm9uZz4ge2NvdW50cnkucG9wdWxhdGlvbn08L2g0PlxuICAgICAgICAgICAgICAgICAgICA8aDQ+PHN0cm9uZz5MYW5ndWFnZTogPC9zdHJvbmc+IHtjb3VudHJ5Lmxhbmd1YWdlc1swXS5uYW1lfTwvaDQ+XG4gICAgICAgICAgICAgICAgICAgIDxoND48c3Ryb25nPkN1cnJlbmN5OiA8L3N0cm9uZz4ge2NvdW50cnkuY3VycmVuY2llc1swXS5uYW1lfSAoe2NvdW50cnkuY3VycmVuY2llc1swXS5zeW1ib2x9KTwvaDQ+IFxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+ICAgXG4gICAgICAgICkpfVxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgICBoNCB7XG4gICAgICAgICAgICAgICAgY29sb3I6IHJnYig5NSwgMTMxLCAxMzEpO1xuICAgICAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIGB9PC9zdHlsZT5cbiAgICA8L0xheW91dD5cbilcblxuLyogdXNlIGdldEluaXRpYWxQcm9wcyB0byByZXRyaWV2ZSBkYXRhIGZyb20gdGhlIFJlc3QgQ291bnRpcmVzIEFQSSBcbnVzaW5nIHRoZSBuYW1lIHBhc3NlZCB0aHJvdWdoIGZyb20gaW5kZXguanMuXG5Vc2VkIGNvdW50cnkgbmFtZSBmcm9tIHF1ZXJ5IHBhcmFtcyBhbmQgZmV0Y2hlZCBpdHMgY291bnRyeSBkYXRhIGZyb20gcmVzdGNvdW50cmllcyBBUEkgKi9cblBvc3QuZ2V0SW5pdGlhbFByb3BzID0gYXN5bmMgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICBjb25zdCB7bmFtZX0gID0gY29udGV4dC5xdWVyeVxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGBodHRwczovL3Jlc3Rjb3VudHJpZXMuZXUvcmVzdC92Mi9uYW1lLyR7bmFtZX1gKVxuICAgIGNvbnN0IGNvdW50cnkgPSBhd2FpdCByZXMuanNvbigpXG5cbiAgICByZXR1cm4geyBjb3VudHJpZXM6IGNvdW50cnkgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQb3N0OyJdfQ== */\\n/*@ sourceURL=/Users/melissa/Desktop/countriesAPI/pages/post.js */\"));\n};\n/* use getInitialProps to retrieve data from the Rest Countires API \nusing the name passed through from index.js.\nUsed country name from query params and fetched its country data from restcountries API */\n\n\n_c = Post;\n\nPost.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var name, res, country;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            name = context.query.name;\n            _context.next = 3;\n            return fetch(\"https://restcountries.eu/rest/v2/name/\".concat(name));\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n\n          case 6:\n            country = _context.sent;\n            return _context.abrupt(\"return\", {\n              countries: country\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/melissa/Desktop/countriesAPI/pages/post.js"],"names":["Layout","fetch","container","margin","width","textAlign","marginTop","backgroundColor","paddingBottom","boxShadow","borderRadius","imageStyle","borderTopLeftRadius","borderTopRightRadius","countryName","fontSize","textTransform","color","letterSpacing","marginBottom","padding","container2","Post","props","countries","map","country","name","flag","region","subregion","population","languages","currencies","symbol","getInitialProps","context","query","res","json"],"mappings":"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","sourcesContent":["import Layout from '../components/Layout'\nimport fetch from 'isomorphic-unfetch'// install library to fetch data\n\n// Inline styling\nconst container = {\n    margin: 'auto',\n    width: '35%',\n    textAlign: 'center',\n    marginTop: '20px',\n    backgroundColor: 'white',\n    paddingBottom: '10px',\n    boxShadow: '7px 10px 17px rgb(72, 77, 77)',\n    borderRadius: '8px'\n}\n\nconst imageStyle = {\n    width: '100%',\n    borderTopLeftRadius: '8px',\n    borderTopRightRadius: '8px'\n}\n\nconst countryName = {\n    fontSize: '30px',\n    textTransform: 'uppercase',\n    color: 'rgb(118, 165, 165)',\n    letterSpacing: '2px',\n    marginTop: '0px',\n    marginBottom: '0px',\n    padding: '15px'\n}\n\nconst container2 = {\n    textAlign: 'left',\n    margin: 'auto',\n    width: '90%',\n}\n\n// using array.map to create an array to display information that was fetch from the API\n// jsx styling is also used to style the div container\nconst Post = (props) => (\n    <Layout>\n        {props.countries.map((country) => (\n            <div key={country.name} style={container}>\n                <img style={imageStyle} src={country.flag}/>\n                <h1 style={countryName}>{country.name}</h1>\n                <div style={container2}>\n                    <h4><strong>Region: </strong> {country.region}</h4>\n                    <h4><strong>Sub-region: </strong> {country.subregion}</h4>\n                    <h4><strong>Population: </strong> {country.population}</h4>\n                    <h4><strong>Language: </strong> {country.languages[0].name}</h4>\n                    <h4><strong>Currency: </strong> {country.currencies[0].name} ({country.currencies[0].symbol})</h4> \n                </div>\n            </div>   \n        ))}\n        <style jsx>{`\n            h4 {\n                color: rgb(95, 131, 131);\n                text-transform: uppercase;\n                font-size: 18px;\n                font-weight: 500;\n            }\n        `}</style>\n    </Layout>\n)\n\n/* use getInitialProps to retrieve data from the Rest Countires API \nusing the name passed through from index.js.\nUsed country name from query params and fetched its country data from restcountries API */\nPost.getInitialProps = async function (context) {\n    const {name}  = context.query\n    const res = await fetch(`https://restcountries.eu/rest/v2/name/${name}`)\n    const country = await res.json()\n\n    return { countries: country }\n}\n\nexport default Post;"]},"metadata":{},"sourceType":"module"}